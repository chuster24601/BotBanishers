{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ZsBDTdPR8ulP","executionInfo":{"status":"ok","timestamp":1679524235141,"user_tz":240,"elapsed":3070,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import os"]},{"cell_type":"code","source":["from google.colab import drive"],"metadata":{"id":"CuwUtPu58zli"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#preprocess data\n","file_path = \"GPT-wiki-intro.csv\"\n","df = pd.read_csv(file_path, error_bad_lines = False, engine = \"python\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G_AgYcZB82sm","executionInfo":{"status":"ok","timestamp":1679524358285,"user_tz":240,"elapsed":1557,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"0c1f0a63-a3f7-434d-e210-c28cf763f6da"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-fdd35715ed4c>:3: FutureWarning: The error_bad_lines argument has been deprecated and will be removed in a future version. Use on_bad_lines in the future.\n","\n","\n","  df = pd.read_csv(file_path, error_bad_lines = False, engine = \"python\")\n","Skipping line 24487: unexpected end of data\n"]}]},{"cell_type":"code","source":["#Explore dataset\n","print(df.shape)\n","print(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mPCC49ZG88G1","executionInfo":{"status":"ok","timestamp":1679524359625,"user_tz":240,"elapsed":63,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"3a582000-796a-4326-801f-1e970950058d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(24485, 12)\n","Index(['id', 'url', 'title', 'wiki_intro', 'generated_intro', 'title_len',\n","       'wiki_intro_len', 'generated_intro_len', 'prompt', 'generated_text',\n","       'prompt_tokens', 'generated_text_tokens'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["df.head\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w7Lserid9bIG","executionInfo":{"status":"ok","timestamp":1679524365059,"user_tz":240,"elapsed":40,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"0fe3e88e-1704-4629-c798-1032fb1ec452"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of              id                                                url  \\\n","0      63064638  https://en.wikipedia.org/wiki/Sexhow%20railway...   \n","1        279621        https://en.wikipedia.org/wiki/Eti%C3%A4inen   \n","2        287229  https://en.wikipedia.org/wiki/Inverse%20functi...   \n","3      26712375  https://en.wikipedia.org/wiki/Stepping%20on%20...   \n","4      38894426        https://en.wikipedia.org/wiki/Rob%20Bradley   \n","...         ...                                                ...   \n","24480  63698353     https://en.wikipedia.org/wiki/Vasily%20Sidorov   \n","24481  56882808  https://en.wikipedia.org/wiki/K25%20Time%20Cap...   \n","24482  56921382  https://en.wikipedia.org/wiki/Isola%20Razzoli%...   \n","24483  20334874        https://en.wikipedia.org/wiki/Ervin%20Sotto   \n","24484    236866  https://en.wikipedia.org/wiki/Jack%20Gilbert%2...   \n","\n","                          title  \\\n","0        Sexhow railway station   \n","1                      Etiäinen   \n","2      Inverse function theorem   \n","3             Stepping on Roses   \n","4                   Rob Bradley   \n","...                         ...   \n","24480            Vasily Sidorov   \n","24481          K25 Time Capsule   \n","24482  Isola Razzoli Lighthouse   \n","24483               Ervin Sotto   \n","24484       Jack Gilbert Graham   \n","\n","                                              wiki_intro  \\\n","0      Sexhow railway station was a railway station b...   \n","1      In Finnish folklore, all places and things, an...   \n","2      In mathematics, specifically differential calc...   \n","3      is a Japanese shōjo manga series written and i...   \n","4      Robert Milner \"Rob\" Bradley, Jr. (born August ...   \n","...                                                  ...   \n","24480  Vasily Sergeyevich Sidorov (; 2 January 1945 –...   \n","24481  K25 Time Capsule is a boxset by Australian rec...   \n","24482  Isola Razzoli Lighthouse  is an active lightho...   \n","24483  Ervin Amedo Sotto (born July 30, 1981) is a Fi...   \n","24484  John \"Jack\" Gilbert Graham (January 23, 1932 –...   \n","\n","                                         generated_intro  title_len  \\\n","0      Sexhow railway station was a railway station l...          3   \n","1      In Finnish folklore, all places and things, an...          1   \n","2      In mathematics, specifically differential calc...          3   \n","3      is a Japanese shōjo manga series written and i...          3   \n","4      Robert Milner \"Rob\" Bradley, Jr. (born August ...          2   \n","...                                                  ...        ...   \n","24480  Vasily Sergeyevich Sidorov (; 2 January 1945 –...          2   \n","24481  K25 Time Capsule is a boxset by the British ro...          3   \n","24482  Isola Razzoli Lighthouse  is an active lightho...          3   \n","24483  Ervin Amedo Sotto (born July 30, 1981) is a Fi...          2   \n","24484  John \"Jack\" Gilbert Graham (January 23, 1932 –...          3   \n","\n","       wiki_intro_len  generated_intro_len  \\\n","0                 174                   78   \n","1                 187                   80   \n","2                 170                   59   \n","3                 335                  121   \n","4                 170                  136   \n","...               ...                  ...   \n","24480             243                   91   \n","24481             150                  154   \n","24482             239                   79   \n","24483             204                  199   \n","24484             252                  128   \n","\n","                                                  prompt  \\\n","0      200 word wikipedia style introduction on 'Sexh...   \n","1      200 word wikipedia style introduction on 'Etiä...   \n","2      200 word wikipedia style introduction on 'Inve...   \n","3      200 word wikipedia style introduction on 'Step...   \n","4      200 word wikipedia style introduction on 'Rob ...   \n","...                                                  ...   \n","24480  200 word wikipedia style introduction on 'Vasi...   \n","24481  200 word wikipedia style introduction on 'K25 ...   \n","24482  200 word wikipedia style introduction on 'Isol...   \n","24483  200 word wikipedia style introduction on 'Ervi...   \n","24484  200 word wikipedia style introduction on 'Jack...   \n","\n","                                          generated_text  prompt_tokens  \\\n","0       located in the town of Sexhow, on the Cumbria...             25   \n","1       animate or inanimate, have a spirit or \"etiäi...             26   \n","2       function theorem states that for every real-v...             26   \n","3       and illustrated by Maki Fujii. The series fol...             26   \n","4       29, 1973) is an American former professional ...             28   \n","...                                                  ...            ...   \n","24480   – 4 December 2016) was a Russian chess grandm...             32   \n","24481   the British rock band Yes, released in 1984. ...             28   \n","24482   lighthouse located on Isola Razzoli, a small ...             31   \n","24483   is a Filipino actor, singer, and television h...             31   \n","24484   – November 2, 2014) was an American songwrite...             27   \n","\n","       generated_text_tokens  \n","0                         88  \n","1                        101  \n","2                         65  \n","3                        150  \n","4                        162  \n","...                      ...  \n","24480                    115  \n","24481                    213  \n","24482                    101  \n","24483                    268  \n","24484                    175  \n","\n","[24485 rows x 12 columns]>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#Explore dataset\n","train_test_split = 0.75\n","\n","human = df.copy()\n","gpt = df.copy()\n","\n","human['text'] = df['wiki_intro']\n","gpt['text'] = df['generated_intro']\n","\n","human = human[['text']]\n","gpt = gpt[['text']]\n","\n","human = human.iloc[::2, :]\n","gpt = gpt.iloc[1::2, :]\n","\n","#add label for train\n","human['label'] = 1.0\n","gpt['label'] = 0.0\n","\n","#stack dataframes and shuffle to create train set\n","from sklearn.utils import shuffle\n","\n","dataset = pd.concat([human, gpt], ignore_index=True)\n","#shuffle dataset for later batch processing\n","dataset = shuffle(dataset)\n","\n","train = dataset.iloc[:int(np.floor(df.shape[0] * train_test_split))]\n","\n","#subtract 2 to prevent train/test independence violation\n","test = dataset.tail(int(np.floor(df.shape[0] * (1 - train_test_split) - 2)))\n","\n","print(train.head)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qSb426XM9cdt","executionInfo":{"status":"ok","timestamp":1679524370098,"user_tz":240,"elapsed":1057,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"71fe21a3-7990-4088-e49c-aeed590e414b"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<bound method NDFrame.head of                                                     text  label\n","3357   Guido Hugo Marx (29 March 1871 - 10 September ...    1.0\n","7120   Plutarch (; fl. 4th century BC) was a tyrant o...    1.0\n","6407   The Südwind Association is an Austrian non-pro...    1.0\n","3447   Jason Herbison (born 1972) is an Australian te...    1.0\n","21901  \"Strange Overtones\" is a song recorded by Amer...    0.0\n","...                                                  ...    ...\n","20375  Micronesia–European Union relations are the fo...    0.0\n","21419  Broadacre (previously known as Creswell and Sk...    0.0\n","8703   W:/2016Album/ (stylized as W:/2016ALBUM/; pron...    1.0\n","4304   Regimini militantis Ecclesiae (Latin for To th...    1.0\n","4728   In geology and geomorphology a planation surfa...    1.0\n","\n","[18363 rows x 2 columns]>\n"]}]},{"cell_type":"code","source":["#copied from kaggle https://www.kaggle.com/code/oldjerry/multi-model-fusion-based-on-baye\n","!pip install tensorflow\n","!pip install nltk\n","import re\n","import nltk\n","import tensorflow as tf\n","from nltk.corpus import wordnet\n","from nltk import word_tokenize\n","from tensorflow import keras\n","from keras.preprocessing.text import Tokenizer\n","from keras.utils import pad_sequences\n","nltk.download('punkt')\n","nltk.download('averaged_perceptron_tagger')\n","nltk.download('wordnet')\n","\n","def removeHTML(x):\n","    html=re.compile(r'<.*?>')\n","    return html.sub(r'',x)\n","\n","\n","# lemm = nltk.stem.WordNetLemmatizer()\n","# w_tokenizer = nltk.tokenize.WhitespaceTokenizer()\n","\n","# def get_wordnet_pos(word):\n","#     #Map POS tag to first character lemmatize() accepts\n","#     tag = nltk.pos_tag([word])[0][1][0].upper()\n","#     tag_dict = {\"J\": wordnet.ADJ,\n","#                 \"N\": wordnet.NOUN,\n","#                 \"V\": wordnet.VERB,\n","#                 \"R\": wordnet.ADV}\n","\n","#     return tag_dict.get(tag, wordnet.NOUN)\n","\n","# def lemmatize(text):\n","#     return [lemm.lemmatize(w, get_wordnet_pos(w)) for w in w_tokenizer.tokenize(text)]\n","\n","def dataPreprocessing(x):    \n","    x = x.lower()\n","    x = removeHTML(x)\n","    x = re.sub(\"@\\w+\", '',x) # removing mentions (@)\n","    x = re.sub(\"'\\d+\", '',x)\n","    x = re.sub(\"\\d+\", '',x)\n","    x = re.sub(r\"[^\\w\\s]\", '',x) # to remove symbols\n","    x = re.sub(\"http\\w+\", '',x)\n","    x = re.sub(\"\\s[a-z]\\s\", '',x)\n","    x = x.strip()\n","    return x\n","\n","train_no_delim = train[\"text\"].apply(lambda x: dataPreprocessing(x))\n","test_no_delim = test[\"text\"].apply(lambda x: dataPreprocessing(x))\n","\n","train[\"text\"] = train_no_delim\n","test[\"text\"] = test_no_delim\n","\n","train_tokens = train_no_delim.apply(lambda x: word_tokenize(x))\n","test_tokens = test_no_delim.apply(lambda x: word_tokenize(x))\n","\n","tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(train_tokens)\n","train_sequences = tokenizer.texts_to_sequences(train_tokens)\n","test_sequences = tokenizer.texts_to_sequences(test_tokens)\n","\n","maxlen = max([len(seq) for seq in train_sequences])\n","train_sequences = pad_sequences(train_sequences, maxlen=maxlen)\n","test_sequences = pad_sequences(test_sequences, maxlen=maxlen)\n","\n","\n","print(train_sequences[0])\n","train_labels = train[\"label\"]\n","test_labels = test[\"label\"]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6klLnTXK9i-V","executionInfo":{"status":"ok","timestamp":1679524404410,"user_tz":240,"elapsed":29653,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"67fa120e-6235-4ef3-9a61-f7191af3395d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.9/dist-packages (2.11.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (23.3.3)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.2.0)\n","Requirement already satisfied: keras<2.12,>=2.11.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.11.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.51.3)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (15.0.6.1)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.4.0)\n","Requirement already satisfied: tensorboard<2.12,>=2.11 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.11.2)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.31.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.8.0)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.22.4)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from tensorflow) (67.6.0)\n","Requirement already satisfied: tensorflow-estimator<2.12,>=2.11.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.11.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from tensorflow) (23.0)\n","Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.19.6)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (4.5.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.9/dist-packages (from astunparse>=1.6.0->tensorflow) (0.40.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (2.16.2)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (0.6.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (2.27.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (3.4.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (2.2.3)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (0.4.6)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.12,>=2.11->tensorflow) (1.8.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow) (4.9)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow) (5.3.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.9/dist-packages (from markdown>=2.6.8->tensorboard<2.12,>=2.11->tensorflow) (6.1.0)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow) (3.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow) (1.26.15)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.9/dist-packages (from werkzeug>=1.0.1->tensorboard<2.12,>=2.11->tensorflow) (2.1.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.9/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.12,>=2.11->tensorflow) (3.15.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.9/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.9/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow) (3.2.2)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: nltk in /usr/local/lib/python3.9/dist-packages (3.8.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from nltk) (4.65.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.9/dist-packages (from nltk) (1.1.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.9/dist-packages (from nltk) (8.1.3)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.9/dist-packages (from nltk) (2022.10.31)\n"]},{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","<ipython-input-7-335cf8a131d3>:52: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  train[\"text\"] = train_no_delim\n","<ipython-input-7-335cf8a131d3>:53: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test[\"text\"] = test_no_delim\n"]},{"output_type":"stream","name":"stdout","text":["[    0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0     0     0     0     0     0     0     0     0     0     0     0\n","     0 20218  5467 11636   134   143     6    18    34  2540   965    28\n","     6   550     3  2592   711     1 70723   551     4   417 10219     8\n","  2327     5  2020  3330     4   127  3411     2     1   357   900  4199\n","  6573     4   237     1  2328   823   476   126  1312     3   823  1802\n","  6196     3  1254   116     1    34   267     2    32  8301     4     1\n","   155  3452     2     1    34   417 10219   377   615 20218  5467 11636\n","     6    23    10   134     3  7033   845    13   524    36   859  4032\n"," 11636     4  9452 70724 11636  8302 70725     8     6    35  1684  1095\n","     3   535     5   242  1247     4    18  1132   504    13   176     6\n","     1   649 22645   366  1139  1602  7033  2250     4    13  2116 20218\n"," 11636     6  1103     2  7033     3     4    63 11636     6   121   268\n","    13   176   112     2  8061   993    13    74     3  1723   860  4246\n","     4    13   359  1197    13  1132   504   586   440     5  3749  5944\n","     3   412]\n"]}]},{"cell_type":"code","source":["train_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qIaY6e_z9m3n","executionInfo":{"status":"ok","timestamp":1679524883802,"user_tz":240,"elapsed":44,"user":{"displayName":"Ammar Safdari","userId":"18244085076020576291"}},"outputId":"114c19d4-b4fc-4698-98b9-ef9e109f36d6"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3357     1.0\n","7120     1.0\n","6407     1.0\n","3447     1.0\n","21901    0.0\n","        ... \n","20375    0.0\n","21419    0.0\n","8703     1.0\n","4304     1.0\n","4728     1.0\n","Name: label, Length: 18363, dtype: float64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#create basic tensorflow LSTM RNN\n","import tensorflow as tf\n","from tensorflow import keras\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, LSTM, CuDNNGRU, CuDNNLSTM, BatchNormalization, Bidirectional\n","\n","train_sequences = np.array(train_sequences)\n","test_sequences = np.array(test_sequences)\n","\n","input_shape = (maxlen,)\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(input_dim=len(tokenizer.word_index)+1, output_dim=128, input_shape=input_shape),\n","    tf.keras.layers.LSTM(64, return_sequences=True),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.LSTM(32),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","model.summary()\n","\n","model.fit(train_sequences, train_labels, epochs=10, batch_size=128)\n","loss, accuracy = model.evaluate(test_sequences, test_labels, verbose=1)\n","print(f'Test accuracy: {accuracy:.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":780},"id":"A03WR0CU_ECe","executionInfo":{"status":"error","timestamp":1678846021476,"user_tz":240,"elapsed":51005,"user":{"displayName":"Jacob Zaslav","userId":"10483836674411554185"}},"outputId":"87c6ae5b-402b-45f4-a640-3ddae7166f24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_1 (Embedding)     (None, 354, 128)          73255424  \n","                                                                 \n"," lstm_2 (LSTM)               (None, 354, 64)           49408     \n","                                                                 \n"," dropout_2 (Dropout)         (None, 354, 64)           0         \n","                                                                 \n"," lstm_3 (LSTM)               (None, 32)                12416     \n","                                                                 \n"," dropout_3 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 73,317,281\n","Trainable params: 73,317,281\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/10\n","  4/879 [..............................] - ETA: 1:30:20 - loss: 0.6929 - accuracy: 0.5273"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-0d8e34c33784>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_sequences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_sequences\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Test accuracy: {accuracy:.4f}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1648\u001b[0m                         ):\n\u001b[1;32m   1649\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1650\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1651\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1652\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    878\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    910\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    132\u001b[0m       (concrete_function,\n\u001b[1;32m    133\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m--> 134\u001b[0;31m     return concrete_function._call_flat(\n\u001b[0m\u001b[1;32m    135\u001b[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m    136\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1743\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1744\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1745\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1746\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1747\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    376\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    379\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     53\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":[],"metadata":{"id":"RYqIACIB_rxh"},"execution_count":null,"outputs":[]}]}